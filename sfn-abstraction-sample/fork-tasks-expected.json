{
  "StartAt": "GenNumbers",
  "States": {
    "GenNumbers": {
      "Next": "ForkProcess",
      "Parameters": {
        "ForkNumbers.$": "States.ArrayRange(0, 3, 1)",
        "ForkSize": "4"
      },
      "Type": "Pass"
    },
    "ForkProcess": {
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "RunTask00",
        "States": {
          "RunTask00": {
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "ProcessErrorInput00"
              }
            ],
            "Next": "MarkingSuccess00",
            "Parameters": {
              "Cluster": "service-cluster",
              "EnableExecuteCommand": true,
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "SecurityGroups": [
                    "sg-ecs-task"
                  ],
                  "Subnets": [
                    "subnet-private-a",
                    "subnet-private-c",
                    "subnet-private-d"
                  ]
                }
              },
              "Overrides": {
                "ContainerOverrides": [
                  {
                    "Command": [
                      "bundle",
                      "exec",
                      "rails",
                      "routes"
                    ],
                    "Environment": [
                      {
                        "Name": "BATCH_FORK_COUNT",
                        "Value": "4"
                      },
                      {
                        "Name": "BATCH_FORK_NUMBER",
                        "Value.$": "States.Format('{}', $.ForkNumber)"
                      }
                    ],
                    "Name": "app"
                  }
                ],
                "Cpu": 1024,
                "Memory": 2048
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskDefinition": "arn:aws:ecs:ap-northeast-1:xxxx:task-definition/service-batch"
            },
            "Resource": "arn:aws:states:::ecs:runTask.sync",
            "ResultPath": "$.TaskResult",
            "Retry": [
              {
                "BackoffRate": 2,
                "ErrorEquals": [
                  "ECS.AmazonECSException"
                ],
                "IntervalSeconds": 5,
                "MaxAttempts": 4
              }
            ],
            "Type": "Task"
          },
          "ProcessErrorInput00": {
            "Next": "CheckError00",
            "Parameters": {
              "Cause.$": "States.StringToJson($.TaskResult.Cause)",
              "Error.$": "$.TaskResult.Error",
              "ForkNumber.$": "$.ForkNumber",
              "ForkSize.$": "$.ForkSize"
            },
            "Type": "Pass"
          },
          "CheckError00": {
            "Choices": [
              {
                "Next": "Retry00",
                "Or": [
                  {
                    "StringEquals": "ResourceInitializationError: failed to configure ENI: failed to setup regular eni: netplugin failed with no error message",
                    "Variable": "$.Cause.StoppedReason"
                  },
                  {
                    "StringEquals": "Unexpected EC2 error while attempting to attach network interface to instance",
                    "Variable": "$.Cause.StoppedReason"
                  }
                ]
              }
            ],
            "Default": "MarkingFailure00",
            "Type": "Choice"
          },
          "MarkingSuccess00": {
            "End": true,
            "Result": "Success",
            "Type": "Pass"
          },
          "MarkingFailure00": {
            "End": true,
            "Result": "Failure",
            "Type": "Pass"
          },
          "Retry00": {
            "Next": "RunTask00",
            "Seconds": 60,
            "Type": "Wait"
          }
        }
      },
      "ItemSelector": {
        "ForkNumber.$": "$$.Map.Item.Value",
        "ForkSize.$": "$.ForkSize"
      },
      "ItemsPath": "$.ForkNumbers",
      "Next": "FindFailedMap",
      "Type": "Map"
    },
    "FindFailedMap": {
      "Next": "FinalJudge",
      "Parameters": {
        "HasFailure.$": "States.ArrayContains($, 'Failure')"
      },
      "Type": "Pass"
    },
    "FinalJudge": {
      "Choices": [
        {
          "BooleanEquals": true,
          "Next": "SfnFailed",
          "Variable": "$.HasFailure"
        }
      ],
      "Default": "SfnSucceed",
      "Type": "Choice"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Success": {
      "End": true,
      "Type": "Pass"
    }
  }
}
